1. Мне не понятна файловая структура, тут смешались кони и люди. Вот захожу я в StateMachines (верхний уровень), думаю "Ну тут все стейт машины объявлены и переходы, не очень конечно, но главное что суть передает". Смотрю, смотрю, а потом захожу в Enemy. А там что? стейт машина! 
Верхнеуровнево бьется обычно на:
    * core - ключевой домен вашей системы, бизнес логика и интерфейсы этой логики, которые инфраструктуре (то-есть средствам движка, БД, клиент-серверной части) необходимо реализовать.
    * infrastructure - реализации ваших интерфейсов, конекретные привязки к юнити, аниматорам и прочему. Тут же можно положить View и все что связано с монобехами.
    * utils - все вспомогательные интерфейсы для core и реализации для infrastructure
    * boostraper (entrypoint) - точка от которой все начинает собираться

2. Стейт машины в целом сделаны правильно. Кстати, после того как ты ушел, мы с Олегом обсудили как правильно и асинхронно связать аниматор со стейт машиной, а имено как уведомлять конкретный стейт о том, что в анимации мы прошли указанную точку.
    Создаем некоторый класс AnimationEventDispatcher (для каждой конкретной анимации). В нем создаем некоторый метод handle.
    >> public void handle(string eventName) {}

    В этом же классе создаем Enum перечисление ваших ивентов анимации, допустим у нас будет один ивент в середине анимации атаки.
    >> public enum EventType
    >> {
    >>    MiddleAttack = 1
    >> }

    Далее объявляем атрибут класса вида Dict<EventType, HashSet <Action>> в котором будем хранить подписки на конкретный ивент

    В юнити редакторе делаем ивент с таким с параметром string и высываем туда имя Enum. В обработчик пихаем handle

    Сам handle уже берет строку, преобразует в значения Enum, получает списк Action из словаря и вызывает каждый экшен. Изи.

    Так же класс имеет метод для подписки (доабвления Action в словарь) и отписки, удаления Action из словаря.

    Ну и теперь, когда собирается собственно объект сущности (игрока например) он создается из префаба, в котором уже есть аниматор и контроллер, там же создается новая машина состояний, которая принимает в том числе и контроллер анимаций. 
    А уже далее, каждое состояние, в Enter может добавить в контроллер анимаций подписку на какое-то событие (и не забыть его снять в Exit).

    Таким образом состояние может получить какое-нибудь событие от аниматора, проставить себе дополнительный флаг какой-нибудь и исходя из этого делать переход.

3. Мне кажется излишнее количество монобехов. Пробуйте оставлять их ТОЛЬКО во вьюхах и контроллерах, которые обратную связь для остальных компонент отдают использовать (то-есть только в V и VM слоях)

